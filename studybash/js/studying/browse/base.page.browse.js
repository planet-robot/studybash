//---------------------------------------------------------------------------------------
// View:        VBasePageBrowse2
// Description: This is the base view for a page that enables the user to browse a list
//              of records. The page contains a breadcrumb, toolbar, form, and 
//              "list" of records. Each of these are represented by a subView.
//
//              Several events are captured here: onClickRecord, onClickBreadcrumb,
//              onClickToolbar, and onFormSubmit/onFormCancel - all of which are 
//              generated by their respective subViews.
//
//              When our data has been successfully loaded, an "onPageReady" event is
//              triggered, for any parent who cares, identifying us as being ready to
//              render. If we fail, we trigger "onPageFailed".
//---------------------------------------------------------------------------------------

var VBasePageBrowse = VBasePage.extend({

    /* overload from VBasePage */
    id : undefined,
    pageTemplateID : "tpl-page",
    contentTemplateID : "tpl-page-browse-content",
    footerTemplateID : "tpl-page-footer-user",
    contentElement : "div.page-content",
    footerElement : "div.page-footer",

    /* overload */
    className : function() {
        return _.result(VBasePage.prototype,'className') + " page-browse";
    },
    
    breadcrumbElement : "div.page-content > div.content-breadcrumb",
    toolbarElement : "div.page-content > div.content-toolbar",
    formElement : "div.page-content > div.content-form",
    listElement : "div.page-content > div.content-list",

    // UI events for the HTML created by the view. inherit all past events and add our own.
    events : function() {
        return _.extend({},_.result(VBasePage.prototype,'events'),{
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    // - Constructor
    //  @options.   They were originally sent to `VBaseSection.setPage`.
    ///////////////////////////////////////////////////////////////////////////

    initialize : function(settings,options) { /* overloaded and extended */        

        this.breadcrumbView = null;
        this.toolbarView = null;
        this.formView = null;
        this.listView = null;

        // this is useful for if we ever have to grab the current state of the
        // toolbar buttons, in order to temporarily disable some of them, before
        // resetting their state to what it was originally.        
        this.savedToolbarButtonState = null;

        VBasePage.prototype.initialize.call(this,settings,options); // copies over parms.
    },

    ///////////////////////////////////////////////////////////////////////////
    // Loads all of the data required for the page. When we are finished, we
    // will call `ready` which prepares us for rendering and eventually triggers
    // the "onPageReady" event.
    //
    // If we want to show a spinner at this point we'll have to do so ourselves.
    //
    //  Note:   The data for the listView must be stored into `this.listData`; and
    //          the data for the breadcrumbView must be stored into 
    //          `this.breadcrumb`.
    ///////////////////////////////////////////////////////////////////////////

    loadData : function() { /* overload */
        // no-op.
        this.ready();
    },

    ///////////////////////////////////////////////////////////////////////////
    // When the `content` element is rendered, using the `content` template,
    // this function provides the attributes hash to be sent to that template.
    ///////////////////////////////////////////////////////////////////////////

    getContentAttributes : function() { /* overload */
        return {
            heading : undefined
        };
    },

    ///////////////////////////////////////////////////////////////////////////
    // All of the data has been loaded that the page requires. We will
    // construct our subviews and then trigger an event notifying whoever is
    // listening that we're ready to render. Notice that we do not render
    // the formView here, as that must be called explicitly (since we assume
    // forms are not present by default).
    ///////////////////////////////////////////////////////////////////////////

    ready : function() { /* overloaded */

        this.breadcrumbView = this.instantiateBreadcrumbView();
        if ( this.breadcrumbView ) {

            // this can fail if the information provided in the URL refers to
            // something that doesn't exist in the db (but not based upon access
            // levels) - i.e., a setID that doesn't exist would trigger this.

            if ( !this.breadcrumbView.hasValidCrumbs() ) {
                this.trigger("onPageFailed",this);
                return;
            }

            this.breadcrumbView.listenTo(this,"cleanup",this.breadcrumbView.remove);
            this.listenTo(this.breadcrumbView,"onClickCrumb",this.onClickBreadcrumb);
        }

        this.toolbarView = this.instantiateToolbarView();
        if ( this.toolbarView ) {
            this.toolbarView.listenTo(this,"cleanup",this.toolbarView.remove);
            this.listenTo(this.toolbarView,"onClickToolbar",this.onClickToolbar);
        }
        
        this.listView = this.instantiateListView();        
        this.listView.listenTo(this,"cleanup",this.listView.remove);
        this.listenTo(this.listView,"onClickRecord",this.onClickRecord);

        this.trigger("onPageReady",this);
    },

    ///////////////////////////////////////////////////////////////////////////
    // No-ops. Overload these as required.
    ///////////////////////////////////////////////////////////////////////////

    instantiateBreadcrumbView : function() {
        return null;
    },

    instantiateToolbarView : function() {
        return null;
    },

    setDefaultToolbarEnabled : function() {
    },

    ///////////////////////////////////////////////////////////////////////////
    // Cleanup ourselves and all subviews.
    ///////////////////////////////////////////////////////////////////////////

    remove : function() { /* overloaded */

        // empty references
        this.stopListening();
        this.savedToolbarButtonState = null;
        this.breadcrumbView = null;
        this.toolbarView = null;        
        this.listView = null;
        this.formView = null;

        return VBasePage.prototype.remove.call(this);
    },

    ///////////////////////////////////////////////////////////////////////////
    // Render the skeleton HTML for the page with our template, before rendering
    // breadcrumb, toolbar, and list views. Finally, we setup the default buttons
    // that are enabled in our toolbar.
    ///////////////////////////////////////////////////////////////////////////

    render : function() { /* overloaded and extended */

        VBasePage.prototype.render.call(this);

        if ( this.breadcrumbView ) {
            this.$(this.breadcrumbElement).html(this.breadcrumbView.render().$el);
        }
        if ( this.toolbarView ) {
            this.$(this.toolbarElement).html(this.toolbarView.render().$el);        
            this.setDefaultToolbarEnabled();
        }

        this.$(this.listElement).html(this.listView.render().$el);        

        return this;
    },

    ///////////////////////////////////////////////////////////////////////////
    // We want to refresh the page. Trigger the event for our section to hear
    // and send it the information it needs to refresh us.
    ///////////////////////////////////////////////////////////////////////////

    refresh : function(options) {
        this.trigger(
            "setPage",
            {
                urlIDs : this.settings.urlIDs
            },
            null,
            options
        );
    },

    ///////////////////////////////////////////////////////////////////////////
    // One of the formViews we have needs to be opened, giving the user to fill in some
    // information and then submit it back here for processing. The form could
    // be of different types, so the name of the form is sent to us as a parameter.
    // Note that this method is never is never called from here, only in
    // derived-views (e.g., from onClickToolbar).
    //
    //  @formName:  The form to construct.
    //
    //  @settings:  Data object of required values. None dictated here.
    //
    //  @options:   Any flags that might dictate behaviour changes in the form.
    //              They were created specifically for this function.
    //
    ///////////////////////////////////////////////////////////////////////////

    displayForm : function(formName,settings,options) {

        // this should never happen.
        if ( this.formView ) {
            this.stopListening(this.formView);
            this.formView = null;
        }

        this.formView = this.instantiateFormView(formName,settings,options); /* overload */
        this.listenTo(this.formView,"onFormSubmit",this.onFormSubmit);
        this.listenTo(this.formView,"onFormCancel",this.onFormCancel);
        this.formView.listenTo(this,"cleanup",this.formView.remove);

        // since only one form should be open at a time in the browse
        // page, we will ask to disable all the form-related buttons
        // on our toolbar, while it's open.

        this.$(this.formElement).html(this.formView.render().$el);
        this.disableToolbarFormButtons(); /* overload */
    },

    ///////////////////////////////////////////////////////////////////////////
    // Remove the formView from our element.
    ///////////////////////////////////////////////////////////////////////////

    closeForm : function() {
        
        this.stopListening(this.formView);
        this.formView.remove();
        this.formView = null;

        // we can now re-enable all the form-related buttons on the toolbar
        this.reEnableToolbarFormButtons(); /* overload */
    },

    ///////////////////////////////////////////////////////////////////////////
    // The formView that was opened has successfully "submitted" whatever the user
    // entered. Depending on the formView that was instantiated, highlighted
    // by the `formName` param, our actions will differ.
    //
    //  @formName:  The `formName` property of the VBaseWidgetForm-derived view
    //              that was submitted.
    //
    //  @formData:  The data serialized from the form. The structure of this
    //              may change significantly depending on the type of formView
    //              we're working with.
    //
    //  @options:   Any flags that were set along our chain of function calls
    //              that got us here. They will relate directly to the action
    //              of "submitting". They may include our own options ("sb...") and
    //              backbone-related options.
    //
    ///////////////////////////////////////////////////////////////////////////

    onFormSubmit : function(formName,formData,options) { /* overload (as required) */

        // by default, just close the form.
        this.closeForm();
    },

    ///////////////////////////////////////////////////////////////////////////
    // The formView has been canceled. Remove it from our element.
    ///////////////////////////////////////////////////////////////////////////

    onFormCancel : function() {
        this.closeForm();
    }

});