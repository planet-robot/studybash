//---------------------------------------------------------------------------------------
// View: VWidgetStudyingBrowseGroupsList
// Description: The list widget for the "browse groups" page of the "studying" section.
//---------------------------------------------------------------------------------------

var VWidgetStudyingBrowseGroupsList = VBaseWidgetList.extend({

    /* overloaded */
    id : "widget-studying-browse-groups-list",
    
    className : function() {
        return _.result(VBaseWidgetList.prototype,'className') + " widget-studying-browse-groups-list";
    },

    // UI events for the HTML created by the view. inherit all past events and add our own.
    events : function() {
        return _.extend({},_.result(VBaseWidgetList.prototype,'events'),{
        });
    },

    instantiateCollection : function() { /* overloaded */
        return new GroupsCollection();
    },

    instantiateModel : function() { /* overloaded */
        return new GroupModel();
    },

    ///////////////////////////////////////////////////////////////////////////
    // We have extra events being generated by our recordView that we will listen
    // for here.
    ///////////////////////////////////////////////////////////////////////////

    onAddCollection : function(model,collection,options) { /* extended */
        var view = VBaseWidgetList.prototype.onAddCollection.call(this,model,collection,options);
        this.listenTo(view,"onRecordJoin",this.onRecordJoin);
        this.listenTo(view,"onRecordLeave",this.onRecordLeave);
    },

    /*
        Triggered Events.
    */

    ///////////////////////////////////////////////////////////////////////////
    // The LIU is joining a group.
    ///////////////////////////////////////////////////////////////////////////

    onRecordJoin : function VWidgetStudyingBrowseGroupsList__onRecordJoin(recordView) {

        Spinner.get().show({msg:"Joining group...",opacity:0});
        $.ajax({
            url : app.JS_ROOT + "ajax/studying/groups-manual.php/join/"+this.settings.urlIDs.mID + "/" + recordView.model.get("id"),
            type : "POST",            
            dataType : "json",
            data : JSON.stringify({
                code : app.store.has("groups.code") ? app.store.get("groups.code") : null
            }),
            contentType : "application/json",
            context : this,
            beforeSend : function(jqxhr,options) {
                jqxhr.setRequestHeader("SESSIONTOKEN", ( app && app.store.has("user") ) ? app.store.get("user").token : "unspecified" );
            },
        })
        .done(function(data,textStatus,jqXHR) {

            // update the information in the group, which gets it re-rendered
            recordView.model.set({
                num_members:recordView.model.get("num_members")+1,
                is_user_member:true
            });
            this.collection.sort({sbTargetModel:recordView.model,sbPrevIdx:-1});
            Spinner.get().hide();
        })
        .fail(function(jqXHR,textStatus,errorThrown) {

            Spinner.get().hide(function(){
                app.dealWithAjaxFail(jqXHR,textStatus,errorThrown);
            });
        });

    },

    ///////////////////////////////////////////////////////////////////////////
    // The LIU is leaving a group.
    ///////////////////////////////////////////////////////////////////////////

    onRecordLeave : function VWidgetStudyingBrowseGroupsList__onRecordLeave(recordView) {

        this.clearSelected();
        recordView.makeSelected();

        // all we do is verify that they want to do what they say they do, and then
        // we trigger the relevant event, for our parent listView.

        bsDialog.create({
            title : "Leave Group",
            msg : "<p>Are you sure you want to leave this group?</p>",
            ok : function() {

                // we will remove the record from the list if there are no more members or
                // if there are but the user has not entered the search code for the group.
                // if the record is going to remain, then we have to re-insert it into the
                // list as its num_members has changed and its owner information might
                // also have changed.

                Spinner.get().show({msg:"Leaving group...",opacity:0});
                $.ajax({
                    url : app.JS_ROOT + "ajax/studying/groups-manual.php/leave/"+this.settings.urlIDs.mID + "/" + recordView.model.get("id"),
                    type : "POST",            
                    dataType : "json",
                    data : JSON.stringify({
                        code : recordView.model.get("code")
                    }),
                    contentType : "application/json",
                    context : this,
                    beforeSend : function(jqxhr,options) {
                        jqxhr.setRequestHeader("SESSIONTOKEN", ( app && app.store.has("user") ) ? app.store.get("user").token : "unspecified" );
                    },
                })
                .done(function(data,textStatus,jqXHR) {

                    // if `data` is null, the group is gone completely. otherwise, let's see if
                    // the code matches what the user has entered. if it does, then we'll keep
                    // it in the list, and re-sort just in case it needs to go somewhere else.

                    if ( ( !data ) || ( data.code !== app.store.get("groups.code") ) ) {
                        this.collection.remove(recordView.model);
                    }
                    else {
                        this.collection.sort({sbTargetModel:recordView.model,sbPrevIdx:-1});
                        recordView.removeSelected();
                    }

                    Spinner.get().hide();
                })
                .fail(function(jqXHR,textStatus,errorThrown) {

                    Spinner.get().hide(function(){
                        app.dealWithAjaxFail(jqXHR,textStatus,errorThrown);
                    });
                });
                
            }.bind(this),
            cancel : function() {
                recordView.removeSelected();
            }.bind(this)
        });        

    },

    ///////////////////////////////////////////////////////////////////////////
    // Simple factory function. The settings and options have been built up
    // already by our base class. Add anything else we need.
    //
    //      settings:
    //
    //          .model
    //          .listSettings
    //
    //      options:
    //
    //          .listOptions
    //
    ///////////////////////////////////////////////////////////////////////////

    instantiateWidgetRecordEditable : function(settings,options) { /* overloaded */
        return new VWidgetStudyingBrowseGroupsRecordEditable(settings,options);
    }

});